#define function helloWorld() view returns(string)
#define function helloWorldSeaport() view returns(string)

#define macro MAIN() = takes(0) returns(0) {

    // Get the function selector
    0x00
    calldataload
    0xE0
    shr

    // Jump to the implementation of the HELLO_WORLD function if the calldata matches the function selector
    dup1 __FUNC_SIG(helloWorld) eq helloWorld jumpi
    __FUNC_SIG(helloWorldSeaport) eq helloWorldSeaport jumpi

    // Revert if no function matches
    0x00 0x00 revert

    helloWorld:
        HELLO_WORLD()

    helloWorldSeaport:
        HELLO_WORLD_SEAPORT()
}

#define macro HELLO_WORLD() = takes(0) returns(0) {
    // store dynamic offset of 0x20 at 0x00
    0x20                                     // [0x20]
    0x00                                     // [0x00, 0x20]
    mstore                                   // []

    // store string length of 0x0d at 0x20
    0x0d                                     // [0x0d]
    0x20                                     // [0x20, 0x0d]
    mstore                                   // []

    // store bytes for "Hello, world!" at 0x40
    __RIGHTPAD(0x48656c6c6f2c20776f726c6421) // ["Hello, world!"]
    0x40                                     // [0x40, "Hello, world!"]
    mstore                                   // []

    // return full 96 byte value
    0x60                                     // [0x60]
    0x00                                     // [0x00, 0x60]
    return                                   // []
}

#define macro HELLO_WORLD_SEAPORT() = takes(0) returns(0) {
    // store dynamic offset of 0x20 at 0x00
    0x20                                     // [0x20]
    0x00                                     // [0x00, 0x20]
    mstore                                   // []

    // store string length of 0x0d at 0x20 (left padded)
    // store bytes for "Hello, world!" at 0x40 (right padded)
    0x0d48656c6c6f2c20776f726c6421 // [0x0d_"Hello, world!"]
    // 0x20 (pointer) + 0x0d(lenght of the string) = 0x2d | 32 + 13 = 45
    0x2d                                     // [0x2d, 0x0d "Hello, world!"] 
    mstore                                   // []

    // return full 96 byte value
    0x60                                     // [0x60]
    0x00                                     // [0x00, 0x60]
    return                                   // []
}

// Result HELLO_WORLD
// 0000000000000000000000000000000000000000000000000000000000000020
// 000000000000000000000000000000000000000000000000000000000000000d
// 48656c6c6f2c20776f726c642100000000000000000000000000000000000000
// Result HELLO_WORLD_SEAPORT
// 0000000000000000000000000000000000000000000000000000000000000020
// 000000000000000000000000000000000000000000000000000000000000000d
// 48656c6c6f2c20776f726c642100000000000000000000000000000000000000
