#define macro BALANCE_LOCATION = takes(0) returns(1) {
    0x00
}

#define macro OWNER_LOCATION = takes(0) returns(0) {
    0x01
}

#define macro ERC20 = takes(0) returns(0) {
    caller OWNER_LOCATION() sstore
}

template <transfer, transfer_from, balance_of, allowance, approve, total_supply, mint, error_location>
#define macro ERC20__FUNCTION_SIGNATURE = takes(0) returns(0) {
    0x00 calldataload 224 shr // function signature
    dup1 0xa9059cbb eq <transfer> jumpi
    dup1 0x23b872dd eq <transfer_from> jumpi
    dup1 0x70a08231 eq <balance_of> jumpi 
    dup1 0xdd62ed3e eq <allowance> jumpi
    dup1 0x095ea7b3 eq <approve> jumpi
    dup1 0x18160ddd eq <total_supply> jumpi
    dup1 0x40c10f19 eq <mint> jumpi
    UTILS__NOT_PAYABLE<error_location>()
    0x00 0x00 return
}

template <throw_error_jump_label>
#define macro MATH__ADD = takes(2) returns(1) {
    // stack state: a b
    dup2 add
    // stack state: (a+b) a
    dup1 swap2 gt
    // stack state: (a > (a+b)) (a+b)
    <throw_error_jump_label> jumpi
}

template <throw_error_jump_label>
#define macro MATH__SUB = takes(2) returns(1) {
    // stack state: a b
    // calling sub will create (a-b)
    // if (b>a) we have integer underflow - throw an error
    dup1 dup3 gt
    // stack state: (b>a) a b
    <throw_error_jump_label> jumpi
    // stack state: a b
    sub
    // stack state: (a-b)
}

template<error_location>
#define macro UTILS__NOT_PAYABLE = takes(0) returns(0) {
    callvalue <error_location> jumpi
}
#define macro UTILS__ONLY_OWNER = takes(0) returns(0) {
    OWNER_LOCATION() sload caller eq is_owner jumpi
        0x00 0x00 revert
    is_owner:
}

